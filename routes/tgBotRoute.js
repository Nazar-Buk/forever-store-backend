import express from "express";
import axios from "axios";

import orderModel from "../models/orderModel.js";
const frontendUrl = process.env.FRONTEND_URL;

const useRouter = express.Router();

// –õ–û–ö–ê–õ–¨–ù–Ü –õ–Ü–ù–ö–ò –Ω–µ –ø–æ–∫–∞–∑—É—é—Ç—å—Å—è –Ω–∞ —Ç–µ–ª–µ–≥—Ä–∞–º—ñ
const BOT_TOKEN = process.env.TG_BOT_TOKEN;
const CHAT_ID = process.env.TG_CHAT_ID;

// === –ï–Ω–¥–ø–æ—ñ–Ω—Ç –¥–ª—è –ø—Ä–∏–π–æ–º—É —Ñ–æ—Ä–º–∏ ===
useRouter.post("/send-tg-form", async (req, res) => {
  try {
    const { orderId } = req.body;

    if (!orderId) {
      return res
        .status(400)
        .json({ success: false, message: "orderId required" });
    }

    const order = await orderModel
      .findById(orderId)
      .populate("items.product")
      .populate({ path: "user", select: "-password -email" }) // select: "-password -email" ‚Äî –≤–∏–∫–ª—é—á–∞—î —Ü—ñ –ø–æ–ª—è –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É.
      .lean();

    if (!order) {
      return res
        .status(404)
        .json({ success: false, message: "–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!" });
    }

    const productList = order.items
      .map((item, ind) => {
        return `${ind + 1}. <a href="${frontendUrl}/product/${
          item.product._id
        }">${item.product.name}</a>
      <b>–ö—ñ–ª—å–∫—ñ—Å—Ç—å:</b> ${item.quantity}
      <b>–†–æ–∑–º—ñ—Ä:</b> ${item.size === "nosize" ? "–ë–µ–∑ —Ä–æ–∑–º—ñ—Ä—É" : item.size}
      `;
      })
      .join("\n");

    const {
      totalPrice,
      shippingAddress: {
        firstName,
        lastName,
        phone,
        city,
        region,
        postName,
        postBranchName,
      },
    } = order;

    const text = `
    üì© <b>–ù–æ–≤–∞ –∑–∞—è–≤–∫–∞ –∑ —Å–∞–π—Ç—É: BUK SKLAD</b>

    üë§ <b>–ù–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ:</b> ${orderId}
    üë§ <b>–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Ç–æ–≤–∞—Ä:</b> ${productList}
    üë§ <b>–¶—ñ–Ω–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</b> ${totalPrice}–≥—Ä–Ω
    üë§ <b>–Ü–º'—è:</b> ${firstName} ${lastName}
    üè† <b>–ê–¥—Ä–µ—Å–∞:</b>
    --- –ù–∞–∑–≤–∞ –ü–æ—à—Ç–∏: ${postName.optionLabel},
    --- –û–±–ª–∞—Å—Ç—å: ${region}
    --- –ù–∞—Å–µ–ª–µ–Ω–∏–π –ø—É–Ω–∫—Ç: ${city},
    --- –í—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è ‚Ññ: ${postBranchName},
    üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${phone}
    `;

    // –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É Telegram
    const response = await axios.post(
      `https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`,
      {
        chat_id: CHAT_ID,
        text,
        parse_mode: "HTML",
      }
    );

    // response.data.ok === true, —è–∫—â–æ Telegram –ø—Ä–∏–π–Ω—è–≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    if (response.data.ok) {
      res.status(200).json({
        success: true,
        message: "–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–æ, –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –≤–∞–º –∑–∞—Ç–µ–ª–µ—Ñ–æ–Ω—É—î !",
      });
    } else {
      res
        .status(500)
        .json({ success: false, error: "–§–æ—Ä–º—É –Ω–µ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –¢–ì!" });
    }
  } catch (error) {
    console.error("‚ùå Error:", error.response?.data || error.message);
    res
      .status(500)
      .json({ success: false, message: error.response?.data || error.message });
  }
});

export default useRouter;
