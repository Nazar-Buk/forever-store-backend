import validator from "validator";
import bcrypt from "bcrypt";
import jwt from "jsonwebtoken";

import userModel from "../models/userModel.js";

const createToken = (id) => {
  return jwt.sign({ id }, process.env.JWT_SECRET);
};

// Route for user login
const loginUser = async (req, res) => {
  try {
    const { email, password } = req.body;
    const user = await userModel.findOne({ email });

    if (!user) {
      return res
        .status(404)
        .json({ success: false, message: "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ —ñ—Å–Ω—É—î!" });
    }

    const isMatch = await bcrypt.compare(password, user.password); // –ø–æ—Ä—ñ–≤–Ω—é—î–º–æ –ø–∞—Ä–æ–ª—ñ

    if (isMatch) {
      const token = createToken(user._id);

      res.cookie("token", token, {
        httpOnly: true, // –ó–∞–±–æ—Ä–æ–Ω—è—î –¥–æ—Å—Ç—É–ø –¥–æ –∫—É–∫–∏ –∑ JavaScript (XSS –∑–∞—Ö–∏—Å—Ç)
        secure: process.env.NODE_ENV === "production", // —Ç—ñ–ª—å–∫–∏ –ø–æ HTTPS —É –ø—Ä–æ–¥—ñ
        sameSite: "Strict", // –∑–∞—Ö–∏—Å—Ç –≤—ñ–¥ CSRF
        // maxAge: 7 * 24 * 60 * 60 * 1000, // –∫—É–∫–∞ –±—É–¥–µ –∂–∏—Ç–∏ 7 –¥–Ω—ñ–≤
      });
      res.status(200).json({ success: true, token });
    } else {
      return res
        .status(401)
        .json({ success: false, message: "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –ª–æ–≥—ñ–Ω –∞–±–æ –ø–∞—Ä–æ–ª—å!" });
    }
  } catch (error) {
    console.log(error);
    res.json({ success: false, message: error.message });
  }
};

// Route for user registration
const registerUser = async (req, res) => {
  try {
    const { name, email, password } = req.body;

    // –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ —ñ—Å–Ω—É—î
    const exists = await userModel.findOne({ email });

    if (exists) {
      return res.json({
        success: false,
        message: "–¢–∞–∫–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ —ñ—Å–Ω—É—î!",
      });
    }

    //–ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –µ–º–µ–π–ª—É —Ç–∞ —á–∏ –ø–∞—Ä–æ–ª—å –Ω–∞–¥—ñ–π–Ω–∏–π
    if (!validator.isEmail(email)) {
      return res.json({
        success: false,
        message: "–ë—É–¥—å –ª–∞—Å–∫–∞ –Ω–∞–ø–∏—à—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –µ–º–µ–π–ª!",
      });
    }

    if (password.length < 8) {
      return res.json({
        success: false,
        message: "–ë—É–¥—å –ª–∞—Å–∫–∞, —Å—Ç–≤–æ—Ä—ñ—Ç—å –Ω–∞–¥—ñ–π–Ω–∏–π –ø–∞—Ä–æ–ª—å!",
      });
    }

    // —Ö–µ—à—É—î–º–æ –ø–∞—Ä–æ–ª—å
    const salt = await bcrypt.genSalt(10); // –º–æ–∂–Ω–∞ —Å—Ç–∞–≤–∏—Ç–∏ –≤—ñ–¥ 5 –¥–æ 15
    const hashedPassword = await bcrypt.hash(password, salt);

    const newUser = new userModel({
      name,
      email,
      password: hashedPassword,
    });

    const user = await newUser.save(); // –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö

    const token = createToken(user._id); // —Å—Ç–≤–æ—Ä—é—î–º–æ —Ç–æ–∫–µ–Ω –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞

    res.cookie("token", token, {
      httpOnly: true,
      secure: process.env.NODE_ENV === "production", // üîê –ª–∏—à–µ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω—É
      sameSite: "strict",
    }); // { httpOnly: true } ‚Äî –æ–ø—Ü—ñ—è, —è–∫–∞ –∫–∞–∂–µ –±—Ä–∞—É–∑–µ—Ä—É: "—Ü—é –∫—É–∫—É –Ω–µ –º–æ–∂–Ω–∞ —á–∏—Ç–∞—Ç–∏ —á–µ—Ä–µ–∑ JavaScript".

    res.json({ success: true, token });

    // –û—Å—å —è–∫ –ø—Ä–∞—Ü—é—î —Ü–µ–π –∫–æ–¥ —ñ–∑ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–æ—é bcrypt:

    // –©–æ —Ç–∞–∫–µ bcrypt?
    // bcrypt ‚Äî —Ü–µ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∞ –¥–ª—è —Ö–µ—à—É–≤–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—ñ–≤. –í–æ–Ω–∞ –¥–æ–∑–≤–æ–ª—è—î –±–µ–∑–ø–µ—á–Ω–æ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ –ø–∞—Ä–æ–ª—ñ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –ø—Ä–æ—Ü–µ—Å–∏ —Ö–µ—à—É–≤–∞–Ω–Ω—è —Ç–∞ —Å–æ–ª—å–æ–≤–æ–≥–æ —Ö–µ—à—É–≤–∞–Ω–Ω—è (salted hashing). –á—ó –∞–ª–≥–æ—Ä–∏—Ç–º –≤–≤–∞–∂–∞—î—Ç—å—Å—è –æ–¥–Ω–∏–º —ñ–∑ –Ω–∞–π–±—ñ–ª—å—à –Ω–∞–¥—ñ–π–Ω–∏—Ö.

    // 1. –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Å–æ–ª—ñ
    // javascript
    // –ö–æ–ø—ñ—é–≤–∞—Ç–∏
    // –†–µ–¥–∞–≥—É–≤–∞—Ç–∏
    // const salt = await bcrypt.genSalt(10);
    // –©–æ —Ç–∞–∫–µ "—Å—ñ–ª—å" (salt)?
    // –°—ñ–ª—å ‚Äî —Ü–µ –≤–∏–ø–∞–¥–∫–æ–≤–∏–π —Ä—è–¥–æ–∫, —è–∫–∏–π –¥–æ–¥–∞—î—Ç—å—Å—è –¥–æ –ø–∞—Ä–æ–ª—è –ø–µ—Ä–µ–¥ —Ö–µ—à—É–≤–∞–Ω–Ω—è–º.
    // –ú–µ—Ç–∞: –ó–∞—Ö–∏—Å—Ç –≤—ñ–¥ –∞—Ç–∞–∫ —Ç–∏–ø—É rainbow table. –ù–∞–≤—ñ—Ç—å —è–∫—â–æ –¥–≤–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –º–∞—é—Ç—å –æ–¥–Ω–∞–∫–æ–≤—ñ –ø–∞—Ä–æ–ª—ñ, —ó—Ö —Ö–µ—à—ñ –±—É–¥—É—Ç—å —Ä—ñ–∑–Ω–∏–º–∏ –∑–∞–≤–¥—è–∫–∏ —Å–æ–ª—ñ.
    // –Ø–∫ —Ü–µ –ø—Ä–∞—Ü—é—î:
    // bcrypt.genSalt(rounds) –≥–µ–Ω–µ—Ä—É—î —Å—ñ–ª—å.
    // rounds ‚Äî —Ü–µ –∫—ñ–ª—å–∫—ñ—Å—Ç—å "—Ü–∏–∫–ª—ñ–≤ –æ–±—á–∏—Å–ª–µ–Ω–Ω—è" –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Å–æ–ª—ñ.
    // –ß–∏–º –±—ñ–ª—å—à–µ —á–∏—Å–ª–æ, —Ç–∏–º –Ω–∞–¥—ñ–π–Ω—ñ—à–µ, –∞–ª–µ —Ç–∏–º –¥–æ–≤—à–µ —Ç—Ä–∏–≤–∞—î –ø—Ä–æ—Ü–µ—Å.
    // –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –∑–Ω–∞—á–µ–Ω–Ω—è –≤—ñ–¥ 10 –¥–æ 12.
    // –ú–µ–Ω—à–µ 10 ‚Äî —à–≤–∏–¥—à–µ, –∞–ª–µ –º–µ–Ω—à –±–µ–∑–ø–µ—á–Ω–æ.
    // –ë—ñ–ª—å—à–µ 12 ‚Äî –±–µ–∑–ø–µ—á–Ω—ñ—à–µ, –∞–ª–µ –∑–Ω–∞—á–Ω–æ –ø–æ–≤—ñ–ª—å–Ω—ñ—à–µ.
    // –ü—Ä–∏–∫–ª–∞–¥:
    // –Ø–∫—â–æ rounds = 10, –≥–µ–Ω–µ—Ä—É–≤–∞–Ω–Ω—è —Å–æ–ª—ñ –∑–∞–π–º–µ –±—ñ–ª—å—à–µ —á–∞—Å—É, –Ω—ñ–∂ –ø—Ä–∏ rounds = 5. –¶–µ —Å—Ç–≤–æ—Ä—é—î –¥–æ–¥–∞—Ç–∫–æ–≤—ñ —Å–∫–ª–∞–¥–Ω–æ—â—ñ –¥–ª—è —Ö–∞–∫–µ—Ä—ñ–≤.
  } catch (error) {
    console.log(error, "Error in user registration");
    res.json({ success: false, message: error.message });
  }
};

// LogOut

const logoutUser = async (req, res) => {
  try {
    res.cookie("token", "", {
      httpOnly: true, // —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–Ω–∏–π –ª–∏—à–µ –Ω–∞ –±–µ–∫–µ–Ω–¥—ñ (–±–µ–∑–ø–µ—á–Ω—ñ—à–µ)
      expires: new Date(0), // –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –¥–∞—Ç—É –≤ –º–∏–Ω—É–ª–µ ‚Äî –∫—É–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏–¥–∞–ª–∏—Ç—å—Å—è
    });

    res.json({
      success: true,
      message: "–í–∏ —É—Å–ø—ñ—à–Ω–æ –≤–∏–π—à–ª–∏ –∑ –æ–±–ª—ñ–∫–æ–≤–æ–≥–æ –∑–∞–ø–∏—Å—É",
    });
  } catch (error) {
    console.log(error, "error Logout");
    res.status(500).json({
      success: false,
      message: "Logout failed. Please try again later.",
    });
  }
};

const checkAuth = async (req, res) => {
  const token = req.cookies.token;

  if (!token) {
    return res.status(401).json({
      success: false,
      isAuthenticated: false,
      message: "–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ!",
    });
  }

  try {
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    const user = await userModel.findById(decoded.id);

    if (!user) {
      return res.status(401).json({
        success: false,
        isAuthenticated: false,
        message: "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!",
      });
    }

    return res.status(200).json({
      success: true,
      isAuthenticated: true,
      userId: decoded.id,
      role: user.role,
    });
  } catch (error) {
    console.log(error, "error");
    return res.status(401).json({
      success: false,
      isAuthenticated: false,
      message: "–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∫–æ–Ω–∞—Ç–∏ –≤—Ö—ñ–¥",
    });
  }
};

export { loginUser, registerUser, logoutUser, checkAuth };
