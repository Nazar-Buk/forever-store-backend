// Multer ‚Äî —Ü–µ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∞ –¥–ª—è Node.js, —è–∫–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ —Ñ–∞–π–ª—ñ–≤, –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä.
// –í–æ–Ω–∞ –∑–∞–∑–≤–∏—á–∞–π –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è —Ä–∞–∑–æ–º —ñ–∑ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–æ–º Express.js, —â–æ–± –ª–µ–≥–∫–æ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –∑ —Ñ–æ—Ä–º–∞–º–∏,
// —è–∫—ñ –º—ñ—Å—Ç—è—Ç—å —Ñ–∞–π–ª–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —á–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∏).

import { v2 as cloudinary } from "cloudinary";
import PDFDocument from "pdfkit";
import path from "path";
import ExcelJS from "exceljs";
import productModel from "../models/productModel.js"; // .js —Ç–æ –ø—ñ–∑–¥—î—Ü —è–∫ –≤–∞–∂–ª–∏–≤–æ!!! —ñ–Ω–∞–∫—à–µ –Ω–µ —Ä–æ–∑—É–º—ñ—î —â–æ –∑–∞ —Ñ–∞–π–¥, —Ç–æ —Ç–æ–±—ñ –Ω–µ —Ä–µ–∞–∫—Ç))

// func for add product
const addProduct = async (req, res) => {
  try {
    const {
      name,
      description,
      price,
      category,
      subCategory,
      sizes,
      isSizesAvailable,
      bestseller,
      code,
      inStock,
    } = req.body;

    const images = req.files;

    let imagesData = await Promise.all(
      images.map(async (item) => {
        let result = await cloudinary.uploader.upload(item.path, {
          resource_type: "image",
          folder: "productsForever", // –ø–∞–ø–∫–∞ –¥–µ –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è —Ñ–æ—Ç–∫–∏ –Ω–∞ cloudinary
        }); // item.path --  –±–æ –∫–æ–Ω—Å–æ–ª—å –ª–æ–≥ –º–µ–Ω—ñ –ø–æ–∫–∞–∑—É—î –æ–±'—î–∫—Ç –≤ –∫–æ—Ç—Ä–æ–º—É —î –∫–ª—é—á path, —Ü–µ–π –æ–±'—î–∫—Ç —ñ —î –Ω–∞—à–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∞
        // cloudinary –æ—Ç—Ä–∏–º–∞—î —à–ª—è—Ö –¥–æ –∫–∞—Ä—Ç–∏–Ω–∫–∏ —ñ –∑–∞–∫–∏–Ω–µ —Ü—é –∫–∞—Ä—Ç–∏–Ω–∫—É –≤ —Ö–º–∞—Ä–∫—É

        // return (await result).secure_url; // –±–µ–∑ —Ü—å–æ–≥–æ –Ω–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏–º–µ
        // return result.secure_url; // —Ü–µ —à–ª—è–ø–∞, —Ç–∞–∫ –Ω–µ –ø—Ä–∞—Ü—é—î

        return {
          url: result.secure_url,
          public_id: result.public_id,
        };
      })
    );

    // Promise.all ‚Äî —Ü–µ –º–µ—Ç–æ–¥, —è–∫–∏–π –¥–æ–∑–≤–æ–ª—è—î –æ–±—Ä–æ–±–ª—è—Ç–∏ –∫—ñ–ª—å–∫–∞ –æ–±—ñ—Ü—è–Ω–æ–∫ –æ–¥–Ω–æ—á–∞—Å–Ω–æ.
    // –í—ñ–Ω –ø—Ä–∏–π–º–∞—î –º–∞—Å–∏–≤ –æ–±—ñ—Ü—è–Ω–æ–∫ —ñ –ø–æ–≤–µ—Ä—Ç–∞—î –Ω–æ–≤–∏–π Promise, —è–∫–∏–π –≤–∏–∫–æ–Ω–∞—î—Ç—å—Å—è, –∫–æ–ª–∏ –≤—Å—ñ –æ–±—ñ—Ü—è–Ω–∫–∏ —É –º–∞—Å–∏–≤—ñ –∑–∞–≤–µ—Ä—à–∞—Ç—å—Å—è.

    /////////////////////////////////////////
    // ‚úÖ Promise.all() –¥–æ–∑–≤–æ–ª—è—î –∑–∞–≤–∞–Ω—Ç–∞–∂—É–≤–∞—Ç–∏ –≤—Å—ñ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –æ–¥–Ω–æ—á–∞—Å–Ω–æ.
    // ‚úÖ –ú–∏ —á–µ–∫–∞—î–º–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≤—Å—ñ—Ö –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—å —ñ –æ—Ç—Ä–∏–º—É—î–º–æ –º–∞—Å–∏–≤ URL-–∞–¥—Ä–µ—Å.
    // ‚úÖ –Ø–∫–±–∏ –Ω–µ Promise.all, —Ç–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—ñ–¥–±—É–≤–∞–ª–æ—Å—è –± –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ (–ø–æ–≤—ñ–ª—å–Ω—ñ—à–µ).
    // ‚úÖ –ß–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –±—É–¥–µ —Ç–∞–∫–∏–º, —Å–∫—ñ–ª—å–∫–∏ —Ç—Ä–∏–≤–∞—î –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞–π–¥–æ–≤—à–æ—ó –∫–∞—Ä—Ç–∏–Ω–∫–∏.

    const productData = {
      name,
      description,
      price: Number(price),
      category,
      subCategory,
      // sizes: JSON.parse(sizes), // –ø–µ—Ä–µ—Ä–æ–±–ª—è—î —ñ–∑ —Å—Ç—Ä—ñ–Ω–≥–∏ –≤ –º–∞—Å–∏–≤, —Ä–æ–∑–ø–∞—Ä—Å–∏–≤)
      bestseller: bestseller === "true" ? true : false,
      images: imagesData,
      code,
      inStock: inStock === "true" ? true : false,
    };

    // –î–æ–¥–∞—î–º–æ sizes —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –≤–æ–Ω–∏ –Ω–∞—Å–ø—Ä–∞–≤–¥—ñ –ø–æ—Ç—Ä—ñ–±–Ω—ñ
    if (isSizesAvailable && sizes) {
      productData.sizes = JSON.parse(sizes); // –ø–µ—Ä–µ—Ä–æ–±–ª—è—î —ñ–∑ —Å—Ç—Ä—ñ–Ω–≥–∏ –≤ –º–∞—Å–∏–≤, —Ä–æ–∑–ø–∞—Ä—Å–∏–≤)
    }

    const product = new productModel(productData); // —Ç–µ –∑ —á–∏–º –º–æ–Ω–≥–æ –≤–º—ñ—î –ø—Ä–∞—Ü—é–≤–∞—Ç–∏
    await product.save();

    res.json({ success: true, message: "–ü—Ä–æ–¥—É–∫—Ç –¥–æ–¥–∞–Ω–æ!" }); // {} -- —Å–µ—Ä–≤–µ—Ä —É—Å–ø—ñ—à–Ω–æ –æ–±—Ä–æ–±–∏–≤ –∑–∞–ø–∏—Ç, –∞–ª–µ –Ω–µ –º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –ø–µ—Ä–µ–¥–∞—á—ñ –∫–ª—ñ—î–Ω—Ç—É, —Ç–æ–º—É {}.
  } catch (error) {
    console.log(error);
    res.json({ success: false, message: error.message });
  }
};

// update product
const updateProduct = async (req, res) => {
  try {
    const { productId } = req.params;
    const uploadedImages = req.files; // –º–∞—Å–∏–≤ –∑ —Ñ–∞–π–ª–∞–º–∏ (–∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏)
    const updatedFields = req.body;
    const { imgForDelete } = req.query;

    if (imgForDelete && imgForDelete !== "[]") {
      const imagesToDelete = JSON.parse(imgForDelete);

      // –í–∏–¥–∞–ª–∏—Ç–∏ –≤—Å—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑ Cloudinary
      await Promise.all(
        imagesToDelete.map(async (id) => {
          if (id) {
            await cloudinary.uploader.destroy(id);
          }
        })
      );
    }

    let uploadedImagesData = [];

    if (updatedFields.images) {
      if (updatedFields.images === "[]") {
        updatedFields.images = JSON.parse(updatedFields.images);
      } else {
        const parsedImages = JSON.parse(updatedFields.images);

        if (uploadedImages.length) {
          let fileIndex = 0;
          // uploadedImagesData -- –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∑—ñ —Å–ª–æ—Ç–∞–º–∏
          uploadedImagesData = parsedImages
            .map((img, ind) => {
              if (img.file) {
                const fileData = {
                  file: uploadedImages[fileIndex],
                  slot: ind,
                };
                fileIndex++;

                return fileData;
              }

              return;
            })
            .filter((item) => item);
        }
        // —Ç—ñ –∫–∞—Ä–∏—Ç–∏–Ω–∫–∏ —â–æ –±—É–ª–∏, –±–µ–∑ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏—Ö –∫–∞—Ä—Ç–∏–Ω–æ–∫
        updatedFields.images = parsedImages.filter((img) => !img.file);
      }
    }

    if (uploadedImagesData.length) {
      // imagesData -- –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –ø–µ—Ä–µ—Ç–≤–æ—Ä–∏–ª–∏—Å—è –Ω–∞ url —ñ public_id
      let imagesData = await Promise.all(
        uploadedImagesData.map(async (item) => {
          let result = await cloudinary.uploader.upload(item.file.path, {
            resource_type: "image",
            folder: "productsForever", // productsForever –ø–∞–ø–∫–∞ –¥–µ –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è —Ñ–æ—Ç–∫–∏ –Ω–∞ cloudinary
          }); // item.file.path --  –±–æ –∫–æ–Ω—Å–æ–ª—å –ª–æ–≥ –º–µ–Ω—ñ –ø–æ–∫–∞–∑—É—î –æ–±'—î–∫—Ç (–Ω–∞—à —Ñ–∞–π–ª) –≤ –∫–æ—Ç—Ä–æ–º—É —î –∫–ª—é—á path, —Ü–µ–π –æ–±'—î–∫—Ç —ñ —î –Ω–∞—à–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∞
          //  cloudinary –æ—Ç—Ä–∏–º–∞—î —à–ª—è—Ö –¥–æ –∫–∞—Ä—Ç–∏–Ω–∫–∏ —ñ –∑–∞–∫–∏–Ω–µ —Ü—é –∫–∞—Ä—Ç–∏–Ω–∫—É –≤ —Ö–º–∞—Ä–∫—É

          return {
            url: result.secure_url,
            public_id: result.public_id,
            slot: item.slot,
          };
        })
      );

      if (updatedFields.images.length) {
        // –≤—Å—Ç–∞–≤–ª—è—é –Ω–æ–≤—ñ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –≤ –ø–æ—Ç—Ä—ñ–±–Ω—ñ —Å–ª–æ—Ç–∏
        imagesData.forEach((item) => {
          updatedFields.images.splice(item.slot, 0, {
            url: item.url,
            public_id: item.public_id,
          });
        });
      } else {
        updatedFields.images = imagesData;
      }
    }

    if (updatedFields.sizes) {
      updatedFields.sizes = JSON.parse(updatedFields.sizes);
    }

    const updatedProduct = await productModel.findByIdAndUpdate(
      productId,
      updatedFields,
      { new: true }
    );
    // productId, // ID –ø—Ä–æ–¥—É–∫—Ç—É
    //   updatedFields, // –û–Ω–æ–≤–ª–µ–Ω—ñ –¥–∞–Ω—ñ
    //   { new: true }; // –ü–æ–≤–µ—Ä–Ω—É—Ç–∏ –æ–Ω–æ–≤–ª–µ–Ω–∏–π –¥–æ–∫—É–º–µ–Ω—Ç

    if (!updatedProduct) {
      res.status(404).json({ success: false, message: "–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });
    }

    res.json({ success: true, message: "–ü—Ä–æ–¥—É–∫—Ç –æ–Ω–æ–≤–ª–µ–Ω–æ!" });
  } catch (error) {
    console.log(error);
    res.json({ success: false, message: error.message });
  }
};

// func for list products
const listProducts = async (req, res) => {
  try {
    // console.log(req.query, "req.query");
    // –æ—Ç–∞–∫ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç–∏ –∑ —Ñ—Ä–æ–Ω—Ç–∞ /api/product/list?page=${currentPage}&limit=${currentLimit}
    // —î–±–∞—Ç—å —è –ø—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç =)

    const page = parseInt(req.query.page) || 1;
    const limit = parseInt(req.query.limit) || 10;
    const skip = (page - 1) * limit; // –û–±—á–∏—Å–ª—é—î skip ‚Äî —Å–∫—ñ–ª—å–∫–∏ —Ç–æ–≤–∞—Ä—ñ–≤ —Ç—Ä–µ–±–∞ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –≤ –±–∞–∑—ñ

    const { search, sort, category, subCategory, priceFrom, priceTo } =
      req.query;

    // –ü–æ–±—É–¥–æ–≤–∞ —Ñ—ñ–ª—å—Ç—Ä–∞

    const filter = {};

    if (search?.trim()) {
      filter.name = { $regex: search, $options: "i" };
      // üîπ { $regex: search, $options: "i" }
      // –¶–µ —É–º–æ–≤–∞ –ø–æ—à—É–∫—É, –¥–µ:

      // ‚úÖ $regex: search
      // $regex ‚Äî —Ü–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä MongoDB, —è–∫–∏–π –æ–∑–Ω–∞—á–∞—î "–ø–æ—à—É–∫ –∑–∞ —Ä–µ–≥—É–ª—è—Ä–Ω–∏–º –≤–∏—Ä–∞–∑–æ–º".

      // search ‚Äî —Ü–µ —Ä—è–¥–æ–∫, —è–∫–∏–π —Ç–∏ —Ö–æ—á–µ—à –∑–Ω–∞–π—Ç–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, "—Å–æ—Ä–æ—á–∫–∞").

      // –¶–µ –ø—Ä–∞—Ü—é—î —è–∫ "–º—ñ—Å—Ç–∏—Ç—å". –¢–æ–±—Ç–æ, —è–∫—â–æ –≤ –Ω–∞–∑–≤—ñ —Ç–æ–≤–∞—Ä—É —î —Å–ª–æ–≤–æ –∞–±–æ —á–∞—Å—Ç–∏–Ω–∞ —Å–ª–æ–≤–∞, —â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î search, –≤–æ–Ω–æ –∑–Ω–∞–π–¥–µ—Ç—å—Å—è.

      // ‚úÖ $options: "i"
      // "i" –æ–∑–Ω–∞—á–∞—î "ignore case", —Ç–æ–±—Ç–æ —ñ–≥–Ω–æ—Ä—É–π —Ä–µ–≥—ñ—Å—Ç—Ä.

      // –ù–∞–ø—Ä–∏–∫–ª–∞–¥, "–°–æ—Ä–æ—á–∫–∞" == "—Å–æ—Ä–æ—á–∫–∞" == "–°–û–†–û–ß–ö–ê".
    }

    if (category?.trim()) {
      filter.category = category;
    }

    if (subCategory?.trim()) {
      filter.subCategory = subCategory;
    }

    if (priceFrom?.trim()) {
      filter.price = { ...filter.price, $gte: Number(priceFrom) }; // $gte - –±—ñ–ª—å—à–µ –∞–±–æ –¥–æ—Ä—ñ–≤–Ω—é—î
    }

    if (priceTo?.trim()) {
      filter.price = { ...filter.price, $lte: Number(priceTo) }; // $lte - –º–µ–Ω—à–µ –∞–±–æ –¥–æ—Ä—ñ–≤–Ω—é—î
    }

    // –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è
    const sortOptions = {};

    switch (sort) {
      case "price_asc":
        sortOptions.price = 1; // –°–æ—Ä—Ç—É—î –∑–∞ —Ü—ñ–Ω–æ—é –ø–æ –∑—Ä–æ—Å—Ç–∞–Ω–Ω—é
        break;
      case "price_desc":
        sortOptions.price = -1; // –°–æ—Ä—Ç—É—î –∑–∞ —Ü—ñ–Ω–æ—é –ø–æ —Å–ø–∞–¥–∞–Ω–Ω—é
        break;
      case "date_new":
        sortOptions.createdAt = -1; // –°–æ—Ä—Ç—É—î –∑–∞ –¥–∞—Ç–æ—é –¥–æ–¥–∞–≤–∞–Ω–Ω—è (–≤—ñ–¥ –Ω–æ–≤–∏—Ö –¥–æ —Å—Ç–∞—Ä–∏—Ö)
        break;
      case "date_old":
        sortOptions.createdAt = 1; // –°–æ—Ä—Ç—É—î –∑–∞ –¥–∞—Ç–æ—é –¥–æ–¥–∞–≤–∞–Ω–Ω—è (–≤—ñ–¥ —Å—Ç–∞—Ä–∏—Ö –¥–æ –Ω–æ–≤–∏—Ö)
        break;
      default:
        sortOptions.createdAt = -1; // –°–æ—Ä—Ç—É—î –∑–∞ –¥–∞—Ç–æ—é –¥–æ–¥–∞–≤–∞–Ω–Ω—è (–≤—ñ–¥ –Ω–æ–≤–∏—Ö –¥–æ —Å—Ç–∞—Ä–∏—Ö)
    }

    // –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—ñ–≤
    const totalCount = await productModel.countDocuments(filter);

    // –û—Ç—Ä–∏–º—É—î–º–æ —Ç–æ–≤–∞—Ä–∏ –∑ –ø—Ä–æ–ø—É—Å–∫–æ–º —Ç–∞ –ª—ñ–º—ñ—Ç–æ–º
    const products = await productModel
      .find(filter)
      .sort(sortOptions)
      .skip(skip)
      .limit(limit);

    res.json({ success: true, products, totalCount });
  } catch (error) {
    console.log(error);
    res.json({ success: false, message: error.message });
  }
};

// for get bestsellers products

const bestsellersProducts = async (req, res) => {
  try {
    const bestsellersForSection = await productModel
      .find({ bestseller: true })
      .sort({
        createdAt: -1,
      })
      .limit(5);
    // sort({createdAt: -1} -- –æ—Ç—Ä–∏–º–∞—é –Ω–∞–π–Ω–æ–≤—ñ—à—ñ –±–µ—Å—Ç—Å–µ–ª–ª–µ—Ä–∏, .limit(5) -- —Ç—ñ–ª—å–∫–∏ 5

    if (!bestsellersForSection.length) {
      return res.status(404).json({
        success: false,
        message: "–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ø—Ä–æ–¥—É–∫—Ç–∏ –¥–ª—è '–•—ñ—Ç –ø—Ä–æ–¥—ñ–∂—ñ–≤'!",
      }); // —Ç–∞–∫ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ —Ü—é –ø–æ–º–∏–ª–∫—É –Ω–∞ —Ñ—Ä–æ–Ω—Ç—ñ --> error.response?.data?.message
    }

    res.json({ success: true, bestsellersForSection });
  } catch (error) {
    console.log(error, "error");
    res.status(500).json({ success: false, message: error.message });
  }
};

// for get latest products

const latestProducts = async (req, res) => {
  try {
    const latestProductsForSection = await productModel
      .find()
      .sort({ createdAt: -1 })
      .limit(10);

    if (!latestProductsForSection.length) {
      return res.status(404).json({
        success: false,
        message: "–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ø—Ä–æ–¥—É–∫—Ç–∏ –¥–ª—è '–ù–æ–≤–∏–Ω–∫–∏!'",
      });
    }

    res.json({ success: true, latestProductsForSection });
  } catch (error) {
    console.log(error, "error");
    res.status(500).json({ success: false, message: error.message });
  }
};

// for get related products

const relatedProducts = async (req, res) => {
  try {
    const { category, subCategory, productId } = req.body;

    const relatedProductsForSection = await productModel
      .find({
        category: category,
        subCategory: subCategory,
        _id: { $ne: productId }, // –í–∏–∫–ª—é—á–∏—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π –ø—Ä–æ–¥—É–∫—Ç, —Ç–∏–ø—É –∞–ª—è "–Ω–µ –¥–æ—Ä—ñ–≤–Ω—é—î"
      })
      .sort({ createdAt: -1 })
      .limit(5);

    if (!relatedProductsForSection.length) {
      return res.status(404).json({
        success: false,
        message: "–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–∏ –¥–ª—è '–°—Ö–æ–∂—ñ —Ç–æ–≤–∞—Ä–∏!'",
      });
    }

    res.json({ success: true, relatedProductsForSection });
  } catch (error) {
    res.status(500).json({ success: false, message: error.message });
  }
};

// func for remove product

const removeProduct = async (req, res) => {
  try {
    const product = await productModel.findById(req.body.id);

    if (!product) {
      return res
        .status(404)
        .json({ success: false, message: "–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!" });
    }

    // –í–∏–¥–∞–ª–∏—Ç–∏ –≤—Å—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑ Cloudinary
    await Promise.all(
      product.images.map(async (img) => {
        if (img.public_id) {
          await cloudinary.uploader.destroy(img.public_id);
        }
      })
    );

    await productModel.findByIdAndDelete(req.body.id);

    res.json({ success: true, message: "–ü—Ä–æ–¥—É–∫—Ç –≤–∏–¥–∞–ª–µ–Ω–æ!" });
  } catch (error) {
    console.log(error);
    res.json({ success: false, message: error.message });
  }
};

// func for single product info

const singleProduct = async (req, res) => {
  try {
    const { productId } = req.body;
    const product = await productModel.findById(productId);

    if (product) {
      res.json({ success: true, product });
    } else {
      res
        .status(404)
        .json({ success: false, message: "404 –ü—Ä–æ–¥—É–∫—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!" });
    }
  } catch (error) {
    console.log(error);
    res.json({ success: false, message: error.message });
  }
};

const getAllProducts = async (req, res) => {
  try {
    const products = await productModel.find({});

    if (!products.length) {
      return res
        .status(404)
        .json({ success: false, message: "–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!" });
    }

    res.json({ success: true, products });
  } catch (error) {
    res.status(500).json({ success: false, message: error.message });
  }
};

const generatePriceListPdf = async (req, res) => {
  try {
    const products = await productModel
      .find({})
      .sort({ category: 1, subCategory: 1, name: 1 });

    // –Ø–∫—â–æ —Ç–æ–≤–∞—Ä—ñ–≤ –Ω–µ–º–∞—î ‚Äî –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ 404
    if (!products.length) {
      return res.status(404).json({
        success: false,
        message: "–ù–µ–º–∞—î —Ç–æ–≤–∞—Ä—ñ–≤ –¥–ª—è —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—è –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞.",
      });
    }

    // 2Ô∏è‚É£ –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏, —â–æ–± –±—Ä–∞—É–∑–µ—Ä —Å–ø—Ä–∏–π–º–∞–≤ –≤—ñ–¥–ø–æ–≤—ñ–¥—å —è–∫ PDF-—Ñ–∞–π–ª
    res.setHeader("Content-Type", "application/pdf");
    res.setHeader(
      "Content-Disposition",
      'attachment; filename="price-list.pdf"'
    );

    // 3Ô∏è‚É£ –°—Ç–≤–æ—Ä—é—î–º–æ PDF-–¥–æ–∫—É–º–µ–Ω—Ç (A4, –∑ –≤—ñ–¥—Å—Ç—É–ø–∞–º–∏)
    const doc = new PDFDocument({ margin: 40, size: "A4" });

    // –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ –ø–æ—Ç—ñ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ (—â–æ–± –æ–¥—Ä–∞–∑—É –≤—ñ–¥–ø—Ä–∞–≤–ª—è—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É)
    doc.pipe(res);

    // ‚úÖ –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ —à—Ä–∏—Ñ—Ç —ñ–∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é –∫–∏—Ä–∏–ª–∏—Ü—ñ
    const fontPath = path.join(process.cwd(), "fonts", "DejaVuSans.ttf");
    doc.font(fontPath);

    // 4Ô∏è‚É£ –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    doc.fontSize(18).text("–ü–†–ê–ô–°-–õ–ò–°–¢ BUK SKLAD", { align: "center" });
    doc.moveDown(1); // —Ä–æ–±–∏—Ç—å –≤—ñ–¥—Å—Ç—É–ø –≤–Ω–∏–∑ –Ω–∞ –æ–¥–∏–Ω —Ä—è–¥–æ–∫ (–ø–æ —Å—É—Ç—ñ, –≤—Å—Ç–∞–≤–ª—è—î –ø–æ—Ä–æ–∂–Ω—ñ–π –ø—Ä–æ—Å—Ç—ñ—Ä).
    // –Ø–∫—â–æ –ø–æ—Å—Ç–∞–≤–∏—Ç–∏ moveDown(2), –±—É–¥–µ –±—ñ–ª—å—à–∏–π –≤—ñ–¥—Å—Ç—É–ø.

    // 5Ô∏è‚É£ –ó–º—ñ–Ω–Ω—ñ –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó —Ç–∞ –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
    let currentCategory = "";
    let currentSubCategory = "";

    products.forEach((product) => {
      // –Ø–∫—â–æ –∑–º—ñ–Ω–∏–ª–∞—Å—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—è ‚Äî –≤–∏–≤–æ–¥–∏–º–æ —ó—ó —è–∫ –∑–∞–≥–æ–ª–æ–≤–æ–∫
      if (product.category !== currentCategory) {
        currentCategory = product.category;
        doc.moveDown(1);
        doc
          .fontSize(12)
          .text(currentCategory.toUpperCase(), { underline: true });
      }

      // –Ø–∫—â–æ —î –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—è —ñ –≤–æ–Ω–∞ –∑–º—ñ–Ω–∏–ª–∞—Å—è ‚Äî –ø–æ–∫–∞–∑—É—î–º–æ —ó—ó –ø—ñ–¥ –∫–∞—Ç–µ–≥–æ—Ä—ñ—î—é
      if (product.subCategory && product.subCategory !== currentSubCategory) {
        currentSubCategory = product.subCategory;
        doc.moveDown(1);
        doc.fontSize(12).text(`‚Ä¢ ${currentSubCategory}`, { indent: 10 });
      }

      // –í–∏–∑–Ω–∞—á–∞—î–º–æ —Å—Ç–∞—Ç—É—Å –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ
      const availability = product.inStock ? "–í –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ" : "–ù–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è";

      // –Ø–∫—â–æ –≤ —Ç–æ–≤–∞—Ä—É —î –∫–æ–¥ ‚Äî –¥–æ–¥–∞—î–º–æ –π–æ–≥–æ –≤ –Ω–∞–∑–≤—É
      const codeText = product.code ? product.code : "";

      // –í–∏–≤–æ–¥–∏–º–æ —Å–∞–º —Ç–æ–≤–∞—Ä (–∑ –≤—ñ–¥—Å—Ç—É–ø–æ–º)
      doc
        .fontSize(10)
        .moveDown(1)
        .text(
          `- –ù–∞–∑–≤–∞: ${product.name} ‚Äî (–ö–æ–¥: ${codeText}) ‚Äî –¶—ñ–Ω–∞: ${
            product.price
          } –≥—Ä–Ω ‚Äî –†–æ–∑–º—ñ—Ä: ${
            product.sizes.length ? product.sizes : "–Ω–µ–º–∞—î"
          } ‚Äî –ù–∞—è–≤–Ω—ñ—Å—Ç—å: ${availability}`,
          { indent: 20 }
        );
    });

    // 7Ô∏è‚É£ –ó–∞–≤–µ—Ä—à—É—î–º–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ —ñ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –π–æ–≥–æ
    doc.end();
  } catch (error) {
    console.log(error, "error");
    res.status(500).json({ success: false, message: error.message });
  }
};

const generatePriceListExcel = async (req, res) => {
  try {
    // 1Ô∏è‚É£ –û—Ç—Ä–∏–º—É—î–º–æ —Ç–æ–≤–∞—Ä–∏ –∑ –±–∞–∑–∏
    const products = await productModel
      .find({})
      .sort({ category: 1, subCategory: 1, name: 1 });

    if (!products.length) {
      return res.status(404).json({
        success: false,
        message: "–ù–µ–º–∞—î —Ç–æ–≤–∞—Ä—ñ–≤ –¥–ª—è —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—è –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞.",
      });
    }

    // 2Ô∏è‚É£ –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—É –∫–Ω–∏–≥—É Excel
    const workbook = new ExcelJS.Workbook();
    const worksheet = workbook.addWorksheet("–ü—Ä–∞–π—Å-–ª–∏—Å—Ç");

    // 3Ô∏è‚É£ –î–æ–¥–∞—î–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫
    worksheet.mergeCells("A1:G1"); // –æ–±‚Äô—î–¥–Ω—É—î –∫–æ–º—ñ—Ä–∫–∏ –≤—ñ–¥ A1 –¥–æ F1 –≤ –æ–¥–Ω—É –≤–µ–ª–∏–∫—É ‚Äî —Ç–æ–±—Ç–æ —Ä–æ–±–∏—Ç—å ‚Äú—à–∞–ø–∫—É‚Äù –Ω–∞ –≤—Å—é —à–∏—Ä–∏–Ω—É —Ç–∞–±–ª–∏—Ü—ñ.
    worksheet.getCell("A1").value = "–ü–†–ê–ô–°-–õ–ò–°–¢ BUK SKLAD"; // —É —Ü—é –æ–±‚Äô—î–¥–Ω–∞–Ω—É –∫–æ–º—ñ—Ä–∫—É –≤—Å—Ç–∞–≤–ª—è—î —Ç–µ–∫—Å—Ç ‚Äî —Ü–µ –Ω–∞–∑–≤–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    worksheet.getCell("A1").font = { size: 18, bold: true }; // —Ä–æ–±–∏—Ç—å —à—Ä–∏—Ñ—Ç 16 —Ä–æ–∑–º—ñ—Ä—É —ñ –∂–∏—Ä–Ω–∏–º.
    worksheet.getCell("A1").alignment = { horizontal: "center" }; // –≤–∏—Ä—ñ–≤–Ω—é—î —Ç–µ–∫—Å—Ç –ø–æ —Ü–µ–Ω—Ç—Ä—É –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ, —â–æ–± –≤—ñ–Ω –∫—Ä–∞—Å–∏–≤–æ –≤–∏–≥–ª—è–¥–∞–≤ —É –≤–µ—Ä—Ö–Ω—ñ–π —á–∞—Å—Ç–∏–Ω—ñ —Ç–∞–±–ª–∏—Ü—ñ.

    // 4Ô∏è‚É£ –î–æ–¥–∞—î–º–æ —à–∞–ø–∫—É —Ç–∞–±–ª–∏—Ü—ñ
    worksheet.addRow([
      "–ù–∞–∑–≤–∞ —Ç–æ–≤–∞—Ä—É",
      "–ö–æ–¥",
      "–¶—ñ–Ω–∞ (–≥—Ä–Ω)",
      "–ö–∞—Ç–µ–≥–æ—Ä—ñ—è",
      "–ü—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—è",
      "–†–æ–∑–º—ñ—Ä",
      "–ù–∞—è–≤–Ω—ñ—Å—Ç—å",
    ]);

    // –°—Ç–∏–ª—ñ –¥–ª—è —à–∞–ø–∫–∏
    const headerRow = worksheet.getRow(2);
    headerRow.eachCell((cell) => {
      cell.font = { bold: true, size: 16 };
      cell.alignment = { horizontal: "center" };
      cell.border = {
        top: { style: "thin" },
        left: { style: "thin" },
        bottom: { style: "thin" },
        right: { style: "thin" },
      };
    });

    // 5Ô∏è‚É£ –î–æ–¥–∞—î–º–æ —Ç–æ–≤–∞—Ä–∏
    products.forEach((product) => {
      const availability = product.inStock ? "–í –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ" : "–ù–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è";
      worksheet.addRow([
        product.name,
        product.code || "-",
        product.price,
        product.category,
        product.subCategory || "-",
        product.sizes.length ? product.sizes.join(", ") : "-", // –Ω–æ–≤–µ –ø–æ–ª–µ
        availability,
      ]);
    });

    // –°—Ç–∏–ª—å –∑–≤–∏—á–∞–π–Ω–∏—Ö —Ä—è–¥–∫—ñ–≤
    worksheet.eachRow((row, rowNumber) => {
      if (rowNumber > 2) {
        row.eachCell((cell) => {
          cell.font = { size: 14 };
          cell.border = {
            top: { style: "thin" },
            left: { style: "thin" },
            bottom: { style: "thin" },
            right: { style: "thin" },
          };
          cell.alignment = { vertical: "middle", wrapText: true };
        });
      }
    });

    // 6Ô∏è‚É£ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –≤–∏—Ä—ñ–≤–Ω—é–≤–∞–Ω–Ω—è —à–∏—Ä–∏–Ω–∏ –∫–æ–ª–æ–Ω–æ–∫
    worksheet.columns.forEach((column) => {
      let maxLength = 0;
      column.eachCell({ includeEmpty: true }, (cell) => {
        const columnLength = cell.value ? cell.value.toString().length : 10;
        if (columnLength > maxLength) maxLength = columnLength;
      });
      column.width = maxLength + 2;
    });

    // 7Ô∏è‚É£ –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ (—â–æ–± —Ñ–∞–π–ª –∑–∞–≤–∞–Ω—Ç–∞–∂—É–≤–∞–≤—Å—è)
    res.setHeader(
      "Content-Type",
      "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    );
    res.setHeader(
      "Content-Disposition",
      'attachment; filename="price-list.xlsx"'
    );

    // 8Ô∏è‚É£ –ó–∞–ø–∏—Å—É—î–º–æ –∫–Ω–∏–≥—É —É –≤—ñ–¥–ø–æ–≤—ñ–¥—å (—Å—Ç—Ä—ñ–º–æ–º)
    await workbook.xlsx.write(res);
    res.end();
  } catch (error) {
    console.log(error, "error");
    res.status(500).json({ success: false, message: error.message });
  }
};

export {
  addProduct,
  listProducts,
  removeProduct,
  singleProduct,
  updateProduct,
  bestsellersProducts,
  latestProducts,
  relatedProducts,
  getAllProducts,
  generatePriceListPdf,
  generatePriceListExcel,
};
